name: Wails Build
description: Creates a Wails binary. Supports Bun & Deno.

branding:
  icon: "archive"
  color: "green"

inputs:
  build:
    description: "Run 'wails build'"
    required: false
    default: true
  sign:
    description: "Sign the build"
    required: false
    default: false
  package:
    description: "Uploads workflow artifacts & uploads tag builds to a release"
    required: false
    default: true
  nsis:
    description: "Build a Windows Installer"
    required: true
  build-name:
    description: "The name of the binary file"
    required: true
  build-platform:
    description: "Platform to build for"
    required: false
    default: "darwin/universal"
  wails-version:
    description: "Wails version to use"
    required: false
    default: "latest"
  wails-build-webview2:
    description: "WebView2 installer method [download, embed, browser, error]"
    required: false
    default: "download"
  go-version:
    description: "Go version to use"
    required: false
    default: "^1.22"
  node-version:
    description: "Version of NodeJS to use"
    required: false
    default: 20
  setup-bun:
    description: "Whether to setup Bun"
    required: false
    default: false
  bun-version:
    description: "Bun version to use"
    required: false
    default: "latest"
  deno-build:
    description: "This gets run into bash, use the full command"
    required: false
    default: ""
  app-working-directory:
    description: "This gets run into bash, use the full command"
    required: false
    default: "."
  deno-working-directory:
    description: "This gets run into bash, use the full command"
    required: false
    default: "."
  deno-version:
    description: "Version of Deno to use"
    required: false
    default: "v1.x"
  sign-macos-app-id:
    description: "MacOS Application Certificate ID"
    required: false
    default: ""
  sign-macos-apple-password:
    description: "MacOS Apple Password"
    required: false
    default: ""
  sign-macos-app-cert:
    description: "MacOS Application Certificate"
    required: false
    default: ""
  sign-macos-app-cert-password:
    description: "MacOS Application Certificate Password"
    required: false
    default: ""
  sign-macos-installer-id:
    description: "MacOS Installer Certificate ID"
    required: false
    default: ""
  sign-macos-installer-cert:
    description: "MacOS Installer Certificate"
    required: false
    default: ""
  sign-macos-installer-cert-password:
    description: "MacOS Installer Certificate Password"
    required: false
    default: ""
  sign-windows-cert:
    description: "Windows Signing Certificate"
    required: false
    default: ""
  sign-windows-cert-password:
    description: "Windows Signing Certificate Password"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    # Setup and configure Go
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        check-latest: true
        go-version: ${{inputs.go-version}}
    - run: go version
      shell: bash

    # Setup and configure NodeJS
    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: ${{inputs.node-version}}

    # (Optional) Setup and configure Bun
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      if: inputs.setup-bun
      with:
        bun-version: ${{inputs.bun-version}}

    # (Optional) Setup and configure Deno
    - name: Setup Deno
      uses: denoland/setup-deno@v1
      if: inputs.deno-build != ''
      with:
        deno-version: ${{inputs.deno-version}}
    - name: Run Deno Command
      if: inputs.deno-build != ''
      shell: bash
      working-directory: ${{inputs.deno-working-directory}}
      run: ${{inputs.deno-build}}

    # Install Wails & Platform Deps
    - name: Install Wails
      if: inputs.build
      run: go install github.com/wailsapp/wails/v2/cmd/wails@${{inputs.wails-version}}
      shell: bash
    - name: Install Linux Wails deps
      if: inputs.build && runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install libgtk-3-0 libwebkit2gtk-4.0-dev gcc-aarch64-linux-gnu
      shell: bash
    - name: Install MacOS Wails deps
      if: runner.os == 'macOS'
      run: brew install mitchellh/gon/gon
      shell: bash

    # Build Step
    - name: Build App
      if: inputs.build && runner.os == 'macOS'
      working-directory: ${{ inputs.app-working-directory }}
      run: wails build --platform ${{inputs.build-platform}} -webview2 ${{inputs.wails-build-webview2}} -o ${{inputs.build-name}}
      shell: bash
    - name: Build App
      if: inputs.build && runner.os == 'Linux'
      working-directory: ${{ inputs.app-working-directory }}
      run: wails build --platform ${{inputs.build-platform}} -webview2 ${{inputs.wails-build-webview2}} -o ${{inputs.build-name}}
      shell: bash
    - name: Build Windows App
      if: inputs.build && !inputs.nsis && runner.os == 'Windows'
      working-directory: ${{ inputs.app-working-directory }}
      run: wails build --platform ${{inputs.build-platform}} -webview2 ${{inputs.wails-build-webview2}} -o ${{inputs.build-name}}
      shell: bash
    - name: Build Windows App + Installer
      if: inputs.build && inputs.nsis && runner.os == 'Windows' 
      working-directory: ${{ inputs.app-working-directory }}
      run: wails build --platform ${{inputs.build-platform}} -webview2 ${{inputs.wails-build-webview2}} -nsis -o ${{inputs.build-name}}
      shell: bash
    - name: Add MacOS perms
      if: inputs.build && runner.os == 'macOS'
      working-directory: ${{ inputs.app-working-directory }}
      run: chmod +x build/bin/*/Contents/MacOS/*
      shell: bash
    - name: Add Linux perms
      if: inputs.build && runner.os  == 'Linux'
      working-directory: ${{ inputs.app-working-directory }}
      run: chmod +x build/bin/*
      shell: bash

    # Package and Sign MacOS
    - name: Import Code-Signing Certificates for MacOS
      if: runner.os == 'macOS' && inputs.sign && startsWith(github.ref, 'refs/tags/')
      uses: Apple-Actions/import-codesign-certs@v3
      with:
        keychain-password: ${{ inputs.sign-macos-apple-password }}
        p12-file-base64: ${{ inputs.sign-macos-app-cert }}
        p12-password: ${{ inputs.sign-macos-app-cert-password }}

    - name: Import Code-Signing Certificates for MacOS Installer
      if: runner.os == 'macOS' && inputs.sign && startsWith(github.ref, 'refs/tags/')
      uses: Apple-Actions/import-codesign-certs@v3
      with:
        keychain-password: ${{ inputs.sign-macos-apple-password }}
        p12-file-base64: ${{ inputs.sign-macos-installer-cert }}
        p12-password: ${{ inputs.sign-macos-installer-cert-password }}
        create-keychain: false

    - name: Sign our MacOS binary
      if: runner.os == 'macOS' && inputs.sign && startsWith(github.ref, 'refs/tags/')
      shell: bash
      working-directory: ${{ inputs.app-working-directory }}
      env:
        APPLE_PASSWORD: ${{ inputs.sign-macos-apple-password }}
      run: |
        echo "Signing Package"
        gon -log-level=info ./build/darwin/gon-sign.json

    - name: Build .app zip file
      if: runner.os == 'macOS'
      working-directory: ${{ inputs.app-working-directory }}
      shell: bash
      run: |
        ditto -c -k ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.app ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.app.zip

    - name: Building Installer
      if: runner.os == 'macOS' && inputs.sign && inputs.sign-macos-installer-id != '' && startsWith(github.ref, 'refs/tags/')
      shell: bash
      working-directory: ${{ inputs.app-working-directory }}
      run: |
        productbuild --sign '${{inputs.sign-macos-installer-id}}' --component ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.app ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.pkg
    
    - name: Building Installer
      if: runner.os == 'macOS' && inputs.sign-macos-installer-id == '' && startsWith(github.ref, 'refs/tags/')
      shell: bash
      working-directory: ${{ inputs.app-working-directory }}
      run: |
        productbuild --component ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.app ${{ inputs.app-working-directory }}/build/bin/${{inputs.build-name}}.pkg
    
    - name: Notarising Installer and ZIP
      if: runner.os == 'macOS' && inputs.sign && startsWith(github.ref, 'refs/tags/')
      shell: bash
      working-directory: ${{ inputs.app-working-directory }}
      env:
        APPLE_PASSWORD: ${{ inputs.sign-macos-apple-password }}
      run: |
        gon -log-level=info ${{ inputs.app-working-directory }}/build/darwin/gon-notarize.json     

    # Windows signing
    - name: Sign Windows binaries
      shell: powershell
      if: runner.os == 'Windows' && inputs.sign && inputs.sign-windows-cert != ''
      working-directory: ${{ inputs.app-working-directory }}
      run: |
        echo "Creating certificate file"
        New-Item -ItemType directory -Path certificate
        Set-Content -Path certificate\certificate.txt -Value '${{ inputs.sign-windows-cert }}'
        certutil -decode certificate\certificate.txt certificate\certificate.pfx
        echo "Signing our binaries"
        & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ inputs.sign-windows-cert-password }}' .\build\bin\${{inputs.build-name}}.exe
        echo "Signing Installer" & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /tr http://ts.ssl.com /f certificate\certificate.pfx /p '${{ inputs.sign-windows-cert-password }}' .\build\bin\${{inputs.build-name}}-amd64-installer.exe

    # Upload build assets
    uses: actions/upload-artifact@v4
      if: inputs.package == 'true'
      with:
        name: ${{inputs.build-name}} (${{runner.os}})
        path: |
          */bin/
          *\bin\*
    - name: Release
      uses: softprops/action-gh-release@v1
      if: inputs.package == 'true' && startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          */bin/*
